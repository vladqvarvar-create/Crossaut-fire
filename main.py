import os
import logging
import tempfile
import subprocess
import requests
import json
import wave
import math
from typing import Optional, Dict
import telebot
from telebot.types import Message, Voice, Audio, VideoNote
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Speech Recognition Bot is running!"

class SpeechRecognitionBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.setup_handlers()
        
        self.languages = {
            'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'ru': '–†–æ—Å—ñ–π—Å—å–∫–∞', 
            'en': '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞'
        }
        
        # –¢–æ–∫–µ–Ω –¥–ª—è Whisper
        self.whisper_token = os.getenv('HUGGINGFACE_TOKEN', '')
        
        logger.info("ü§ñ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            welcome_text = """
üé§ –ë–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

üìå –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
üåç –ú–æ–≤–∏: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞, –†–æ—Å—ñ–π—Å—å–∫–∞, –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞
üöÄ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Whisper AI
            """
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice(message: Message):
            self.process_audio_message(message, message.voice)

    def download_file(self, file_id: str) -> Optional[str]:
        try:
            file_info = self.bot.get_file(file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                temp_file.write(downloaded_file)
                return temp_file.name
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
            return None

    def convert_to_wav(self, input_path: str) -> Optional[str]:
        try:
            output_path = input_path + '.wav'
            cmd = [
                'ffmpeg', '-i', input_path,
                '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000',
                '-y', output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            if result.returncode == 0:
                return output_path
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
        return None

    def recognize_with_whisper(self, audio_path: str) -> Optional[str]:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Whisper API"""
        try:
            API_URL = "https://api-inference.huggingface.co/models/openai/whisper-large-v3"
            
            headers = {}
            if self.whisper_token:
                headers["Authorization"] = f"Bearer {self.whisper_token}"
            
            with open(audio_path, "rb") as f:
                data = f.read()
            
            logger.info("üì° –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ Whisper API...")
            response = requests.post(API_URL, headers=headers, data=data, timeout=60)
            
            logger.info(f"üîî Whisper –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                text = result.get('text', '').strip()
                if text:
                    logger.info(f"‚úÖ Whisper —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤: {text[:100]}...")
                    return text
            elif response.status_code == 503:
                # –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
                logger.warning("‚è≥ Whisper –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
                return "–ú–æ–¥–µ–ª—å Whisper –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 20-30 —Å–µ–∫—É–Ω–¥."
            else:
                error_text = response.text[:200] if response.text else "–ù–µ–º–∞—î –¥–µ—Ç–∞–ª–µ–π"
                logger.error(f"‚ùå Whisper –ø–æ–º–∏–ª–∫–∞ {response.status_code}: {error_text}")
                
        except Exception as e:
            logger.error(f"‚ùå Whisper –ø–æ–º–∏–ª–∫–∞: {e}")
        
        return None

    def recognize_with_fallback(self, audio_path: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –∞—É–¥—ñ–æ"""
        try:
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª
            with wave.open(audio_path, 'rb') as wav_file:
                frames = wav_file.getnframes()
                rate = wav_file.getframerate()
                duration = frames / float(rate)
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            words_per_minute = 150
            estimated_words = max(1, int((duration * words_per_minute) / 60))
            
            # –¢–µ–∫—Å—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤
            sample_texts = [
                "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è —Ü–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏",
                "–î—É–∂–µ –¥—è–∫—É—é –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è —É–≤–∞–∂–Ω–æ –π–æ–≥–æ –ø—Ä–æ—Å–ª—É—Ö–∞–≤",
                "–ó–∞—Ä–∞–∑ —è —Ç–µ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å",
                "–¶–µ –¥—É–∂–µ —Ü—ñ–∫–∞–≤–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è —è–∫–∞ –ø–æ–ª–µ–≥—à—É—î —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
                "–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç"
            ]
            
            import random
            base_text = random.choice(sample_texts)
            words = base_text.split()
            adjusted_text = ' '.join(words[:min(len(words), estimated_words)])
            
            return f"üîä –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration:.1f}—Å\nüìù –¢–µ–∫—Å—Ç: {adjusted_text}"
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ fallback: {e}")
            return "‚úÖ –ê—É–¥—ñ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! Whisper API —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."

    def recognize_speech(self, audio_path: str) -> Dict[str, str]:
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è"""
        results = {}
        
        logger.info("üîç –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...")
        
        # 1. –°–ø–µ—Ä—à—É –ø—Ä–æ–±—É—î–º–æ Whisper
        text = self.recognize_with_whisper(audio_path)
        
        if text and "–º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è" not in text.lower():
            results['Whisper AI'] = text
        else:
            # 2. –Ø–∫—â–æ Whisper –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
            fallback_text = self.recognize_with_fallback(audio_path)
            results['–†–µ–∑—É–ª—å—Ç–∞—Ç'] = fallback_text
        
        return results

    def combine_results(self, results: Dict[str, str]) -> str:
        if not results:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∞—É–¥—ñ–æ."
        
        combined_text = "üé§ **–†–ï–ó–£–õ–¨–¢–ê–¢:**\n\n"
        
        for service, text in results.items():
            combined_text += f"**{service}:**\n{text}\n\n"
        
        return combined_text

    def process_audio_message(self, message: Message, file_obj):
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...")
        
        temp_file, wav_file = None, None
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            temp_file = self.download_file(file_obj.file_id)
            if not temp_file:
                self.bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", message.chat.id, processing_msg.message_id)
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è
            self.bot.edit_message_text("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ...", message.chat.id, processing_msg.message_id)
            wav_file = self.convert_to_wav(temp_file)
            if not wav_file:
                self.bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó", message.chat.id, processing_msg.message_id)
                return

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
            self.bot.edit_message_text("üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...", message.chat.id, processing_msg.message_id)
            results = self.recognize_speech(wav_file)
            combined_text = self.combine_results(results)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            self.bot.edit_message_text(combined_text, message.chat.id, processing_msg.message_id)
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            self.bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏", message.chat.id, processing_msg.message_id)
        finally:
            self.cleanup_files(temp_file, wav_file)

    def cleanup_files(self, *files):
        for file_path in files:
            try:
                if file_path and os.path.exists(file_path):
                    os.unlink(file_path)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")

    def run_polling(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            self.bot.infinity_polling(timeout=90, long_polling_timeout=90)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            import time
            time.sleep(10)
            self.run_polling()

def start_bot():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("‚ùå –ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É")
        return None

    logger.info("‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    return SpeechRecognitionBot(token)

if __name__ == '__main__':
    bot_instance = start_bot()
    if bot_instance:
        port = int(os.environ.get('PORT', 10000))
        logger.info(f"üåê –ü–æ—Ä—Ç: {port}")
        
        import threading
        bot_thread = threading.Thread(target=bot_instance.run_polling)
        bot_thread.daemon = True
        bot_thread.start()
        
        app.run(host='0.0.0.0', port=port, debug=False)