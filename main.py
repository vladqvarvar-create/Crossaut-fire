import os
import logging
import tempfile
import subprocess
from typing import Optional, Dict
import telebot
from telebot.types import Message, Voice, Audio, VideoNote

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class SpeechRecognitionBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.setup_handlers()
        
        # –ú–æ–≤–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        self.languages = {
            'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'ru': '–†—É—Å—Å–∫–∏–π', 
            'en': 'English'
        }
        
        logger.info("–ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")

    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            welcome_text = """
üé§ –ë–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

üìå –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ê—É–¥—ñ–æ—Ñ–∞–π–ª–∏
‚Ä¢ –í—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏

üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –†–æ—Å—ñ–π—Å—å–∫–∞ 
‚Ä¢ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞—É–¥—ñ–æ –∞–±–æ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫—É!
            """
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['status'])
        def send_status(message: Message):
            status_text = "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è."
            self.bot.reply_to(message, status_text)

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice(message: Message):
            self.process_audio_message(message, message.voice, 'voice')

        @self.bot.message_handler(content_types=['audio'])
        def handle_audio(message: Message):
            self.process_audio_message(message, message.audio, 'audio')

        @self.bot.message_handler(content_types=['video_note'])
        def handle_video_note(message: Message):
            self.process_video_note(message, message.video_note)

    def download_file(self, file_id: str) -> Optional[str]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ Telegram"""
        try:
            file_info = self.bot.get_file(file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                temp_file.write(downloaded_file)
                return temp_file.name
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return None

    def convert_to_wav(self, input_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ —É WAV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output_path = input_path + '.wav'
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
            cmd = [
                'ffmpeg', '-i', input_path,
                '-acodec', 'pcm_s16le',
                '-ac', '1',
                '-ar', '16000',
                '-y', output_path
            ]
            
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=30
            )
            
            if result.returncode != 0:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞: {result.stderr}")
                return None
                
            return output_path
        except subprocess.TimeoutExpired:
            logger.error("–¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ")
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
            return None

    def extract_audio_from_video_note(self, video_path: str) -> Optional[str]:
        """–í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏"""
        try:
            audio_path = video_path + '.wav'
            
            cmd = [
                'ffmpeg', '-i', video_path,
                '-vn', '-acodec', 'pcm_s16le',
                '-ac', '1', '-ar', '16000',
                '-y', audio_path
            ]
            
            result = subprocess.run(
                cmd, 
                capture_output=True, 
                text=True, 
                timeout=30
            )
            
            if result.returncode != 0:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞ (–≤—ñ–¥–µ–æ): {result.stderr}")
                return None
                
            return audio_path
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–æ–±—É—Ç–∫—É –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ: {e}")
            return None

    def recognize_speech(self, audio_path: str) -> Dict[str, str]:
        """
        –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
        """
        results = {}
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        services = [
            self.recognize_with_google,
            self.recognize_with_mozilla
        ]
        
        for service in services:
            try:
                for lang_code, lang_name in self.languages.items():
                    logger.info(f"–°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è {lang_name}")
                    text = service(audio_path, lang_code)
                    
                    if text and len(text.strip()) > 5:
                        results[lang_name] = text
                        logger.info(f"–£—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è {lang_name}")
                        break
                        
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
                continue
                
            if results:  # –Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –≤–∏—Ö–æ–¥–∏–º–æ
                break
                
        return results

    def recognize_with_google(self, audio_path: str, language: str) -> Optional[str]:
        """
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Google Speech Recognition
        –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ speech_recognition –∞–±–æ –ø—Ä—è–º—ñ API –≤–∏–∫–ª–∏–∫–∏
        """
        try:
            # –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏
            logger.info(f"–Ü–º—ñ—Ç–∞—Ü—ñ—è Google —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {language}")
            
            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º:
            # - Google Speech-to-Text API
            # - –∞–±–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ speech_recognition
            
            return f"–¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–∫—Å—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–≤–∏ {self.languages[language]}. –£ —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó —Ç—É—Ç –±—É–¥–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –≤–∞—à–æ–≥–æ –∞—É–¥—ñ–æ."
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Google —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None

    def recognize_with_mozilla(self, audio_path: str, language: str) -> Optional[str]:
        """
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Mozilla DeepSpeech
        """
        try:
            logger.info(f"–Ü–º—ñ—Ç–∞—Ü—ñ—è Mozilla —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {language}")
            
            # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º DeepSpeech
            # –ü–æ—Ç—Ä–µ–±—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
            
            return f"DeepSpeech —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {self.languages[language]}. –¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–∫—Å—Ç."
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Mozilla —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None

    def combine_results(self, results: Dict[str, str]) -> str:
        """–û–±'—î–¥–Ω–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è"""
        if not results:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –±—ñ–ª—å—à —á—ñ—Ç–∫–∏–º –∞—É–¥—ñ–æ."
        
        combined_text = "üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:\n\n"
        
        for lang, text in results.items():
            combined_text += f"üåç {lang}:\n{text}\n\n"
        
        combined_text += "üí° –¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∞ –≤–µ—Ä—Å—ñ—è. –î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ API —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏."
        return combined_text

    def cleanup_files(self, *files):
        """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        for file_path in files:
            try:
                if file_path and os.path.exists(file_path):
                    os.unlink(file_path)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {e}")

    def process_audio_message(self, message: Message, file_obj, file_type: str):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            temp_file = self.download_file(file_obj.file_id)
            if not temp_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É WAV
            wav_file = self.convert_to_wav(temp_file)
            if not wav_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                self.cleanup_files(temp_file)
                return

            self.bot.edit_message_text(
                "üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            results = self.recognize_speech(wav_file)
            combined_text = self.combine_results(results)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                combined_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {file_type} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
            self.bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_file, wav_file)

    def process_video_note(self, message: Message, video_note: VideoNote):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–æ–∫"""
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
            temp_video = self.download_file(video_note.file_id)
            if not temp_video:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ
            audio_file = self.extract_audio_from_video_note(temp_video)
            if not audio_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–æ–±—É—Ç–∫—É –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                self.cleanup_files(temp_video)
                return

            self.bot.edit_message_text(
                "üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            results = self.recognize_speech(audio_file)
            combined_text = self.combine_results(results)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                combined_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info("–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫—É")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏: {e}")
            self.bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_video, audio_file)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Render...")
        try:
            self.bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            import time
            time.sleep(10)
            self.run()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Render
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("–ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("–ü–û–ú–ò–õ–ö–ê: –í–∫–∞–∂—ñ—Ç—å TELEGRAM_BOT_TOKEN —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Render")
        return

    logger.info("–¢–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = SpeechRecognitionBot(token)
    bot.run()

if __name__ == '__main__':
    main()