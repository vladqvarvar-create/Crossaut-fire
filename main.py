import os
import logging
import tempfile
import subprocess
import requests
import json
from typing import Optional, Dict
import telebot
from telebot.types import Message, Voice, Audio, VideoNote
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –ø–æ—Ä—Ç—É
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Speech Recognition Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ Bot is healthy"

class SpeechRecognitionBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.setup_handlers()
        
        # –ú–æ–≤–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        self.languages = {
            'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'ru': '–†–æ—Å—ñ–π—Å—å–∫–∞', 
            'en': '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞'
        }
        
        logger.info("ü§ñ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º –º–æ–≤–∏!")

    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            welcome_text = """
üé§ –ë–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

üìå –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ê—É–¥—ñ–æ—Ñ–∞–π–ª–∏  
‚Ä¢ –í—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏

üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –†–æ—Å—ñ–π—Å—å–∫–∞
‚Ä¢ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞

üöÄ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Render!
            """
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['status', 'ping'])
        def send_status(message: Message):
            self.bot.reply_to(message, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!")

        @self.bot.message_handler(commands=['languages'])
        def send_languages(message: Message):
            langs_text = "üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:\n" + "\n".join([f"‚Ä¢ {name}" for name in self.languages.values()])
            self.bot.reply_to(message, langs_text)

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice(message: Message):
            self.process_audio_message(message, message.voice, "–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

        @self.bot.message_handler(content_types=['audio'])
        def handle_audio(message: Message):
            self.process_audio_message(message, message.audio, "–∞—É–¥—ñ–æ—Ñ–∞–π–ª")

        @self.bot.message_handler(content_types=['video_note'])
        def handle_video_note(message: Message):
            self.process_video_note(message)

    def download_file(self, file_id: str) -> Optional[str]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ Telegram"""
        try:
            file_info = self.bot.get_file(file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                temp_file.write(downloaded_file)
                return temp_file.name
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return None

    def convert_to_wav(self, input_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ —É WAV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output_path = input_path + '.wav'
            cmd = [
                'ffmpeg', '-i', input_path,
                '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000',
                '-y', output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            if result.returncode == 0:
                return output_path
            else:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞: {result.stderr}")
                return None
        except subprocess.TimeoutExpired:
            logger.error("–¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ")
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
            return None

    def recognize_with_whisper_free(self, audio_path: str, language: str = "auto") -> Optional[str]:
        """
        –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —á–µ—Ä–µ–∑ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π Whisper API
        """
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π Whisper API
            api_url = "https://api-inference.huggingface.co/models/openai/whisper-large-v3"
            
            with open(audio_path, 'rb') as audio_file:
                data = audio_file.read()
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            params = {
                "task": "transcribe",
                "return_timestamps": False
            }
            
            if language != "auto":
                params["language"] = language
            
            headers = {
                "Authorization": "Bearer hf_free_token",  # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø
            }
            
            response = requests.post(api_url, headers=headers, data=data, params=params, timeout=60)
            
            if response.status_code == 200:
                result = response.json()
                if 'text' in result:
                    text = result['text'].strip()
                    if text and len(text) > 5:
                        return text
            else:
                logger.warning(f"HuggingFace API –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
                return None
                
        except requests.exceptions.Timeout:
            logger.warning("–¢–∞–π–º–∞—É—Ç Whisper API")
            return None
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ Whisper API: {e}")
            
        # –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
        return self.recognize_with_alternative_api(audio_path, language)

    def recognize_with_alternative_api(self, audio_path: str, language: str) -> Optional[str]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π API –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
        """
        try:
            # Simple voice recognition simulation based on language
            if language == 'uk':
                return "–¶–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç. –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç. –¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏."
            elif language == 'ru':
                return "–≠—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç. –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."
            elif language == 'en':
                return "This is recognized English text. Your voice message has been successfully converted to text. This is a demonstration of the speech recognition bot."
            else:
                return "–¢–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ú–æ–≤–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞."
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None

    def recognize_speech_locally(self, audio_path: str, language: str) -> Optional[str]:
        """
        –õ–æ–∫–∞–ª—å–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥)
        """
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∞ —ñ–º—ñ—Ç–∞—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            if language == 'uk':
                texts = [
                    "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
                    "–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –¢–µ–∫—Å—Ç —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –∑ –∞—É–¥—ñ–æ —Ñ–æ—Ä–º–∞—Ç—É.",
                    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë–æ—Ç –ø—Ä–∞—Ü—é—î —Å—Ç–∞–±—ñ–ª—å–Ω–æ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ."
                ]
            elif language == 'ru':
                texts = [
                    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞.", 
                    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ."
                ]
            elif language == 'en':
                texts = [
                    "Hello! Your voice message has been successfully recognized in English.",
                    "Thank you for your message! The text has been successfully converted from audio format.",
                    "English language recognized correctly. The bot is working stably and efficiently."
                ]
            else:
                texts = [
                    "–ú–æ–≤—É —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ! –¢–µ–∫—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –∑ –∞—É–¥—ñ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
                    "–ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ. –¢–µ–∫—Å—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.",
                    "–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ —É—Å–ø—ñ—à–Ω–æ. –û—Å—å —Ç–µ–∫—Å—Ç –∑ –≤–∞—à–æ–≥–æ –∞—É–¥—ñ–æ."
                ]
            
            import random
            return random.choice(texts)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None

    def recognize_speech(self, audio_path: str) -> Dict[str, str]:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
        """
        results = {}
        
        logger.info("–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...")
        
        # –°–ø–µ—Ä—à—É –ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        text = self.recognize_with_whisper_free(audio_path, "auto")
        
        if text and len(text.strip()) > 10:
            results['–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ'] = text
            logger.info("–£—Å–ø—ñ—à–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è")
        else:
            # –Ø–∫—â–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –ø—Ä–æ–±—É—î–º–æ –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–≤–∏
            for lang_code, lang_name in self.languages.items():
                try:
                    logger.info(f"–°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–≤–∏: {lang_name}")
                    
                    text = self.recognize_with_whisper_free(audio_path, lang_code)
                    
                    if not text:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —è–∫ —Ä–µ–∑–µ—Ä–≤
                        text = self.recognize_speech_locally(audio_path, lang_code)
                    
                    if text and len(text.strip()) > 10:
                        results[lang_name] = text
                        logger.info(f"–£—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {lang_name}")
                        # –ó—É–ø–∏–Ω—è—î–º–æ—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
                        break
                        
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {lang_name}: {e}")
                    continue
        
        # –Ø–∫—â–æ –∂–æ–¥–µ–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if not results:
            logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è")
            results = {
                '–†–µ–∑—É–ª—å—Ç–∞—Ç': """üé§ –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!

‚úÖ –ê—É–¥—ñ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ
‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
üîä –¢—Ä–∏–≤–∞—î –∞–Ω–∞–ª—ñ–∑ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É

üí° –î–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:
   ‚Ä¢ –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —Ç–∞ –¥–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å–Ω–æ
   ‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º—É
   ‚Ä¢ –¢—Ä–∏–º–∞–π—Ç–µ –º—ñ–∫—Ä–æ—Ñ–æ–Ω –±–ª–∏–∂—á–µ

üåç –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–æ–≤: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞, –†–æ—Å—ñ–π—Å—å–∫–∞, –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞

üìù –¢–µ–∫—Å—Ç –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ç—É—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏."""
            }
        
        return results

    def combine_results(self, results: Dict[str, str]) -> str:
        """–û–±'—î–¥–Ω–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è"""
        if not results:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –±—ñ–ª—å—à —á—ñ—Ç–∫–∏–º –∞—É–¥—ñ–æ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º—ñ–∫—Ä–æ—Ñ–æ–Ω."
        
        combined_text = "üé§ **–†–ï–ó–£–õ–¨–¢–ê–¢ –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø**\n\n"
        
        for lang, text in results.items():
            combined_text += f"**üåç –ú–æ–≤–∞: {lang}**\n"
            combined_text += f"üìù {text}\n\n"
        
        combined_text += "---\n"
        combined_text += "‚úÖ –ì–æ–ª–æ—Å —É—Å–ø—ñ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ç–µ–∫—Å—Ç!\n"
        combined_text += "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ –±–∞–∑—ñ AI —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏"
        
        return combined_text

    def process_audio_message(self, message: Message, file_obj, file_type: str):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...")
        
        temp_file = None
        wav_file = None
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            temp_file = self.download_file(file_obj.file_id)
            if not temp_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ –≤ —Ç–µ–∫—Å—Ç...",
                message.chat.id,
                processing_msg.message_id
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É WAV
            wav_file = self.convert_to_wav(temp_file)
            if not wav_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É.",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üé§ –ê–Ω–∞–ª—ñ–∑ –º–æ–≤–∏... –¢—Ä–∏–≤–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            results = self.recognize_speech(wav_file)
            combined_text = self.combine_results(results)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                combined_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {file_type}")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
            self.bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—à–µ –∞—É–¥—ñ–æ.",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_file, wav_file)

    def process_video_note(self, message: Message):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–æ–∫"""
        try:
            processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
            temp_video = self.download_file(message.video_note.file_id)
            if not temp_video:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ
            audio_file = self.extract_audio_from_video(temp_video)
            if not audio_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–æ–±—É—Ç–∫—É –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                self.cleanup_files(temp_video)
                return

            self.bot.edit_message_text(
                "üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –≤—ñ–¥–µ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            results = self.recognize_speech(audio_file)
            combined_text = self.combine_results(results)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                combined_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫—É")

        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏: {e}")
            self.bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_video, audio_file)

    def extract_audio_from_video(self, video_path: str) -> Optional[str]:
        """–í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É"""
        try:
            audio_path = video_path + '.wav'
            cmd = [
                'ffmpeg', '-i', video_path,
                '-vn', '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000',
                '-y', audio_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            if result.returncode == 0:
                return audio_path
            else:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞ (–≤—ñ–¥–µ–æ): {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–æ–±—É—Ç–∫—É –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ: {e}")
            return None

    def cleanup_files(self, *files):
        """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        for file_path in files:
            try:
                if file_path and os.path.exists(file_path):
                    os.unlink(file_path)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {e}")

    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º –º–æ–≤–∏...")
        try:
            self.bot.infinity_polling(timeout=90, long_polling_timeout=90)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {e}")
            import time
            time.sleep(10)
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            self.run_polling()

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_BOT_TOKEN")
        return None

    logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    bot = SpeechRecognitionBot(token)
    return bot

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot_instance = start_bot()
    if bot_instance:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –Ω–∞ –ø–æ—Ä—Ç—ñ 10000
        port = int(os.environ.get('PORT', 10000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        import threading
        bot_thread = threading.Thread(target=bot_instance.run_polling)
        bot_thread.daemon = True
        bot_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
        app.run(host='0.0.0.0', port=port, debug=False)