import os
import telebot
import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import requests
import re
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

def download_file(url, file_path):
    response = requests.get(url, timeout=30)
    with open(file_path, 'wb') as f:
        f.write(response.content)

def convert_audio_to_wav(input_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –∞—É–¥—ñ–æ –≤ WAV"""
    try:
        if input_path.endswith('.oga') or input_path.endswith('.ogg'):
            audio = AudioSegment.from_ogg(input_path)
        else:
            audio = AudioSegment.from_file(input_path)
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        audio = audio.set_frame_rate(16000)
        audio = audio.set_channels(1)
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—É—á–Ω–æ—Å—Ç—ñ
        if audio.dBFS < -25:
            audio = audio + 8
        
        wav_path = input_path.replace('.oga', '.wav').replace('.ogg', '.wav')
        audio.export(wav_path, format="wav")
        
        logger.info(f"–ê—É–¥—ñ–æ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ: {len(audio)}ms")
        return wav_path
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
        return None

def transcribe_audio(audio_path, language='uk-UA'):
    recognizer = sr.Recognizer()
    recognizer.energy_threshold = 300
    recognizer.pause_threshold = 0.8
    
    try:
        with sr.AudioFile(audio_path) as source:
            recognizer.adjust_for_ambient_noise(source, duration=0.5)
            audio_data = recognizer.record(source)
            
            if len(audio_data.frame_data) == 0:
                return ""
            
            text = recognizer.recognize_google(audio_data, language=language, timeout=25)
            logger.info(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ {language}: {text[:50]}...")
            return text
            
    except sr.UnknownValueError:
        return ""
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è {language}: {e}")
        return ""

def transcribe_all_languages(audio_path):
    """–†–æ–∑–ø—ñ–∑–Ω–∞—î –∞—É–¥—ñ–æ —Ç—Ä—å–æ–º–∞ –º–æ–≤–∞–º–∏"""
    results = {}
    
    languages = [
        ('uk-UA', 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'),
        ('ru-RU', 'üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞'), 
        ('en-US', 'üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞')
    ]
    
    for lang_code, lang_name in languages:
        text = transcribe_audio(audio_path, lang_code)
        if text and len(text.strip()) > 1:  # –ú—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏
            results[lang_name] = text
    
    return results

def format_results(results, file_type):
    """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
    if not results:
        return f"""
üìÅ –¢–∏–ø: {file_type}
‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É

üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
‚Ä¢ –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ –∞—É–¥—ñ–æ (–º–µ–Ω—à–µ 2 —Å–µ–∫—É–Ω–¥)
‚Ä¢ –°–∏–ª—å–Ω–∏–π —à—É–º –Ω–∞ —Ñ–æ–Ω—ñ
‚Ä¢ –î—É–∂–µ —Ç–∏—Ö–∏–π –≥–æ–ª–æ—Å
‚Ä¢ –ú–æ–≤–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è

üé§ –ü–æ—Ä–∞–¥–∏:
‚Ä¢ –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —Ç–∞ –≥–æ–ª–æ—Å–Ω–æ
‚Ä¢ –¢—Ä–∏–º–∞–π—Ç–µ –º—ñ–∫—Ä–æ—Ñ–æ–Ω –±–ª–∏–∂—á–µ
‚Ä¢ –ó–∞–ø–∏—Å—É–π—Ç–µ –≤ —Ç–∏—Ö–æ–º—É –º—ñ—Å—Ü—ñ
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å 3-30 —Å–µ–∫—É–Ω–¥
"""
    
    formatted = f"üìÅ –¢–∏–ø: {file_type}\n"
    formatted += f"üéØ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –º–æ–≤: {len(results)}\n\n"
    
    for lang, text in results.items():
        # –ü–æ–∫—Ä–∞—â—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = re.sub(r'\s+', ' ', text).strip()
        if text:
            text = text[0].upper() + text[1:]
            if text[-1] not in ['.', '!', '?']:
                text += '.'
            
            formatted += f"{lang}:\n{text}\n\n"
    
    return formatted

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
üé§ –ë–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –Ω–∞ Render!

üåü –ü—ñ–¥—Ç—Ä–∏–º—É—î –º–æ–≤–∏:
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶ ‚Ä¢ –†–æ—Å—ñ–π—Å—å–∫–∞ üá∑üá∫ ‚Ä¢ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ üá¨üáß
‚Ä¢ –°—É—Ä–∂–∏–∫ —Ç–∞ –∑–º—ñ—à–∞–Ω—ñ –º–æ–≤–∏ üîÄ

üìÅ –ü—Ä–∞—Ü—é—î –∑:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ üé§
‚Ä¢ –ê—É–¥—ñ–æ —Ñ–∞–π–ª–∞–º–∏ üéµ  
‚Ä¢ –í—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∞–º–∏ üé•

üí° –î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:
‚Ä¢ –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —Ç–∞ –¥–æ—Å–∏—Ç—å –≥–æ–ª–æ—Å–Ω–æ
‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: 3-30 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ú—ñ–Ω—ñ–º—É–º —à—É–º—ñ–≤ –Ω–∞ —Ñ–æ–Ω—ñ

–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –±–æ—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –π–æ–≥–æ!
"""
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['status'])
def status(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞ Render!")

@bot.message_handler(content_types=['voice', 'audio', 'video_note'])
def handle_audio(message):
    temp_path, wav_path = None, None
    
    try:
        msg = bot.reply_to(message, "üîÑ –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
        if message.voice:
            file_info = bot.get_file(message.voice.file_id)
            file_type = "–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        elif message.audio:
            file_info = bot.get_file(message.audio.file_id)
            file_type = "–∞—É–¥—ñ–æ —Ñ–∞–π–ª"
        elif message.video_note:
            file_info = bot.get_file(message.video_note.file_id)
            file_type = "–≤—ñ–¥–µ–æ–∫—Ä—É–∂–æ–∫"
        else:
            bot.edit_message_text("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É", message.chat.id, msg.message_id)
            return
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        bot.edit_message_text("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...", message.chat.id, msg.message_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        
        temp_path = tempfile.NamedTemporaryFile(delete=False, suffix='.oga').name
        download_file(file_url, temp_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
        bot.edit_message_text("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è...", message.chat.id, msg.message_id)
        wav_path = convert_audio_to_wav(temp_path)
        
        if not wav_path:
            bot.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ", message.chat.id, msg.message_id)
            return
        
        # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ
        bot.edit_message_text("üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...", message.chat.id, msg.message_id)
        results = transcribe_all_languages(wav_path)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_text = format_results(results, file_type)
        bot.edit_message_text(final_text, message.chat.id, msg.message_id)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        try:
            bot.edit_message_text(error_msg, message.chat.id, msg.message_id)
        except:
            bot.reply_to(message, error_msg)
    
    finally:
        # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        for path in [temp_path, wav_path]:
            if path and os.path.exists(path):
                try:
                    os.unlink(path)
                except:
                    pass

@bot.message_handler(content_types=['text'])
def handle_text(message):
    bot.reply_to(message, "üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è!")

if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ Render...")
    bot.infinity_polling()
