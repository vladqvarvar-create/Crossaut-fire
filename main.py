import os
import logging
import tempfile
import subprocess
from typing import Optional
import telebot
from telebot.types import Message, Voice, Audio, VideoNote
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –ø–æ—Ä—Ç—É
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Speech Recognition Bot is running!"

class SpeechRecognitionBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.setup_handlers()
        logger.info("ü§ñ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")

    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            welcome_text = """
üé§ –ë–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

üìå –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ê—É–¥—ñ–æ—Ñ–∞–π–ª–∏  
‚Ä¢ –í—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏

üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –†–æ—Å—ñ–π—Å—å–∫–∞
‚Ä¢ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞

üöÄ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Render!
            """
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['status', 'ping'])
        def send_status(message: Message):
            self.bot.reply_to(message, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!")

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice(message: Message):
            self.process_audio_message(message, message.voice, "–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

        @self.bot.message_handler(content_types=['audio'])
        def handle_audio(message: Message):
            self.process_audio_message(message, message.audio, "–∞—É–¥—ñ–æ—Ñ–∞–π–ª")

        @self.bot.message_handler(content_types=['video_note'])
        def handle_video_note(message: Message):
            self.bot.reply_to(message, "üìπ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–æ–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

    def download_file(self, file_id: str) -> Optional[str]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ Telegram"""
        try:
            file_info = self.bot.get_file(file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                temp_file.write(downloaded_file)
                return temp_file.name
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return None

    def convert_to_wav(self, input_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ —É WAV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output_path = input_path + '.wav'
            cmd = [
                'ffmpeg', '-i', input_path,
                '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000',
                '-y', output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                return output_path
            else:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞: {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
            return None

    def recognize_speech_demo(self) -> str:
        """–î–µ–º–æ-—Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏"""
        return """üé§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞

‚úÖ –ê—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!
‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ

üåç –£ —Ä–µ–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó —Ç—É—Ç –±—É–¥–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —Ä–æ—Å—ñ–π—Å—å–∫–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–∞–º–∏.

üí° –î–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ API —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏."""

    def process_audio_message(self, message: Message, file_obj, file_type: str):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            temp_file = self.download_file(file_obj.file_id)
            if not temp_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É WAV
            wav_file = self.convert_to_wav(temp_file)
            if not wav_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                self.cleanup_files(temp_file)
                return

            self.bot.edit_message_text(
                "üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ (–¥–µ–º–æ)
            result_text = self.recognize_speech_demo()

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                result_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {file_type}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
            self.bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_file, wav_file)

    def cleanup_files(self, *files):
        """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        for file_path in files:
            try:
                if file_path and os.path.exists(file_path):
                    os.unlink(file_path)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")

    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (Web Service)...")
        try:
            self.bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {e}")
            import time
            time.sleep(10)
            self.run_polling()

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_BOT_TOKEN")
        return None

    logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    bot = SpeechRecognitionBot(token)
    return bot

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot_instance = start_bot()
    if bot_instance:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –Ω–∞ –ø–æ—Ä—Ç—ñ 10000
        port = int(os.environ.get('PORT', 10000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        import threading
        bot_thread = threading.Thread(target=bot_instance.run_polling)
        bot_thread.daemon = True
        bot_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
        app.run(host='0.0.0.0', port=port, debug=False)