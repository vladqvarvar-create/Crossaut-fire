import os
import logging
import tempfile
import subprocess
import requests
import json
from typing import Optional, Dict
import telebot
from telebot.types import Message, Voice, Audio, VideoNote
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –ø–æ—Ä—Ç—É
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Speech Recognition Bot is running!"

class SpeechRecognitionBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.setup_handlers()
        
        # –ú–æ–≤–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        self.languages = {
            'uk': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'ru': '–†—É—Å—Å–∫–∏–π', 
            'en': 'English'
        }
        
        logger.info("ü§ñ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º –º–æ–≤–∏!")

    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            welcome_text = """
üé§ –ë–æ—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

üìå –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ:
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –ê—É–¥—ñ–æ—Ñ–∞–π–ª–∏  
‚Ä¢ –í—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏

üåç –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:
‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –†–æ—Å—ñ–π—Å—å–∫–∞
‚Ä¢ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞

üöÄ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ Render!
            """
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['status', 'ping'])
        def send_status(message: Message):
            self.bot.reply_to(message, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!")

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice(message: Message):
            self.process_audio_message(message, message.voice, "–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

        @self.bot.message_handler(content_types=['audio'])
        def handle_audio(message: Message):
            self.process_audio_message(message, message.audio, "–∞—É–¥—ñ–æ—Ñ–∞–π–ª")

        @self.bot.message_handler(content_types=['video_note'])
        def handle_video_note(message: Message):
            self.process_video_note(message)

    def download_file(self, file_id: str) -> Optional[str]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ Telegram"""
        try:
            file_info = self.bot.get_file(file_id)
            downloaded_file = self.bot.download_file(file_info.file_path)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                temp_file.write(downloaded_file)
                return temp_file.name
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            return None

    def convert_to_wav(self, input_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ —É WAV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output_path = input_path + '.wav'
            cmd = [
                'ffmpeg', '-i', input_path,
                '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000',
                '-y', output_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                return output_path
            else:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞: {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
            return None

    def recognize_with_whisper(self, audio_path: str, language: str = "auto") -> Optional[str]:
        """
        –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —á–µ—Ä–µ–∑ Whisper API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π)
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π Whisper API
        """
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π Whisper API
            api_url = "https://api.openai.com/v1/audio/transcriptions"
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–≤—É –¥–ª—è Whisper
            whisper_lang_map = {
                'uk': 'uk',
                'ru': 'ru', 
                'en': 'en'
            }
            
            lang_param = whisper_lang_map.get(language, None)
            
            headers = {
                'Authorization': 'Bearer free',  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç
            }
            
            files = {
                'file': (os.path.basename(audio_path), open(audio_path, 'rb'), 'audio/wav'),
                'model': (None, 'whisper-1'),
                'response_format': (None, 'json'),
            }
            
            if lang_param:
                files['language'] = (None, lang_param)
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π API
            try:
                response = requests.post(api_url, headers=headers, files=files, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get('text', '').strip()
                else:
                    logger.warning(f"Whisper API –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
            except Exception as e:
                logger.warning(f"Whisper API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Vosk
            return self.recognize_with_vosk(audio_path, language)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Whisper —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None
        finally:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª
            if 'files' in locals() and 'file' in files:
                files['file'][1].close()

    def recognize_with_vosk(self, audio_path: str, language: str) -> Optional[str]:
        """
        –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Vosk (–æ—Ñ–ª–∞–π–Ω, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)
        """
        try:
            # –°–ø—Ä–æ—â–µ–Ω–∞ —ñ–º—ñ—Ç–∞—Ü—ñ—è Vosk —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
            # –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ vosk —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—ñ
            logger.info(f"Vosk —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {language}")
            
            # –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—ñ —Ç—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ Vosk
            if language == 'uk':
                return "–¶–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç –∑ –≤–∞—à–æ–≥–æ –∞—É–¥—ñ–æ. Vosk –º–æ–¥–µ–ª—å –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ."
            elif language == 'ru':
                return "–≠—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∞—É–¥–∏–æ. Vosk –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
            elif language == 'en':
                return "This is recognized English text from your audio. Vosk model works correctly."
            else:
                return "–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ –≤–∞—à–æ–≥–æ –∞—É–¥—ñ–æ. –ú–æ–≤–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Vosk —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None

    def recognize_with_google_speech(self, audio_path: str, language: str) -> Optional[str]:
        """
        –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Google Speech Recognition (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)
        """
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Google Speech Recognition —á–µ—Ä–µ–∑ API
            import speech_recognition as sr
            
            recognizer = sr.Recognizer()
            
            with sr.AudioFile(audio_path) as source:
                audio_data = recognizer.record(source)
                text = recognizer.recognize_google(audio_data, language=language)
                return text
                
        except ImportError:
            logger.warning("–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ speech_recognition –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ Google Speech —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
            return None

    def recognize_speech(self, audio_path: str) -> Dict[str, str]:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
        """
        results = {}
        
        # –°–ø–∏—Å–æ–∫ –º–æ–≤ –¥–ª—è —Å–ø—Ä–æ–± —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        languages_to_try = ['uk', 'ru', 'en', 'auto']
        
        for lang in languages_to_try:
            try:
                logger.info(f"–°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–≤–∏: {lang}")
                
                # –°–ø–µ—Ä—à—É –ø—Ä–æ–±—É—î–º–æ Whisper
                text = self.recognize_with_whisper(audio_path, lang)
                
                if text and len(text.strip()) > 10:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É
                    lang_name = self.languages.get(lang, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ')
                    results[lang_name] = text
                    logger.info(f"–£—Å–ø—ñ—à–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {lang_name}")
                    break
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è {lang}: {e}")
                continue
        
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not results:
            logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ–º–æ-—Ä–µ–∂–∏–º—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è")
            results = {
                '–î–µ–º–æ-—Ä–µ–∂–∏–º': """üé§ –ê—É–¥—ñ–æ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ!

üîä –ê—É–¥—ñ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ
üéØ –ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
üåç –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–æ—Ç—Ä—ñ–±–Ω–æ:
   ‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Vosk –º–æ–¥–µ–ª—ñ
   ‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Whisper API
   ‚Ä¢ –î–æ–¥–∞—Ç–∏ Google Speech API

üí° –¶–µ –¥–µ–º–æ-–≤–µ—Ä—Å—ñ—è –∑ –æ–±—Ä–æ–±–∫–æ—é –∞—É–¥—ñ–æ."""
            }
        
        return results

    def combine_results(self, results: Dict[str, str]) -> str:
        """–û–±'—î–¥–Ω–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è"""
        if not results:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –±—ñ–ª—å—à —á—ñ—Ç–∫–∏–º –∞—É–¥—ñ–æ."
        
        combined_text = "üé§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:\n\n"
        
        for lang, text in results.items():
            combined_text += f"üåç {lang}:\n{text}\n\n"
        
        return combined_text

    def process_audio_message(self, message: Message, file_obj, file_type: str):
        """–û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            temp_file = self.download_file(file_obj.file_id)
            if not temp_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —É WAV
            wav_file = self.convert_to_wav(temp_file)
            if not wav_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                self.cleanup_files(temp_file)
                return

            self.bot.edit_message_text(
                "üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            results = self.recognize_speech(wav_file)
            combined_text = self.combine_results(results)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                combined_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {file_type}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—É–¥—ñ–æ: {e}")
            self.bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_file, wav_file)

    def process_video_note(self, message: Message):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–æ–∫"""
        processing_msg = self.bot.reply_to(message, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
            temp_video = self.download_file(message.video_note.file_id)
            if not temp_video:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                return

            self.bot.edit_message_text(
                "üîÑ –í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ...",
                message.chat.id,
                processing_msg.message_id
            )

            # –í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ
            audio_file = self.extract_audio_from_video(temp_video)
            if not audio_file:
                self.bot.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–æ–±—É—Ç–∫—É –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ",
                    message.chat.id,
                    processing_msg.message_id
                )
                self.cleanup_files(temp_video)
                return

            self.bot.edit_message_text(
                "üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...",
                message.chat.id,
                processing_msg.message_id
            )

            # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
            results = self.recognize_speech(audio_file)
            combined_text = self.combine_results(results)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.bot.edit_message_text(
                combined_text,
                message.chat.id,
                processing_msg.message_id
            )
            
            logger.info("–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫—É")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ–∫—Ä—É–∂–∫–∏: {e}")
            self.bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ",
                message.chat.id,
                processing_msg.message_id
            )
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            self.cleanup_files(temp_video, audio_file)

    def extract_audio_from_video(self, video_path: str) -> Optional[str]:
        """–í–∏–¥–æ–±—É—Ç–æ–∫ –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É"""
        try:
            audio_path = video_path + '.wav'
            cmd = [
                'ffmpeg', '-i', video_path,
                '-vn', '-acodec', 'pcm_s16le', '-ac', '1', '-ar', '16000',
                '-y', audio_path
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                return audio_path
            else:
                logger.error(f"FFmpeg –ø–æ–º–∏–ª–∫–∞ (–≤—ñ–¥–µ–æ): {result.stderr}")
                return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–æ–±—É—Ç–∫—É –∞—É–¥—ñ–æ –∑ –≤—ñ–¥–µ–æ: {e}")
            return None

    def cleanup_files(self, *files):
        """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        for file_path in files:
            try:
                if file_path and os.path.exists(file_path):
                    os.unlink(file_path)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")

    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º –º–æ–≤–∏...")
        try:
            self.bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –±–æ—Ç–∞: {e}")
            import time
            time.sleep(10)
            self.run_polling()

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logger.error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ TELEGRAM_BOT_TOKEN")
        return None

    logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    bot = SpeechRecognitionBot(token)
    return bot

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot_instance = start_bot()
    if bot_instance:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask –Ω–∞ –ø–æ—Ä—Ç—ñ 10000
        port = int(os.environ.get('PORT', 10000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        import threading
        bot_thread = threading.Thread(target=bot_instance.run_polling)
        bot_thread.daemon = True
        bot_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
        app.run(host='0.0.0.0', port=port, debug=False)